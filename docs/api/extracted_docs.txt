src/pipelib.ads:--   =============================================================================
src/pipelib.ads:--   Pipelib - Reusable Pipeline Components Library
src/pipelib.ads:--   Copyright (c) 2025 A Bit of Help, Inc.
src/pipelib.ads:--   SPDX-License-Identifier: MIT
src/pipelib.ads:--
src/pipelib.ads:--   A library of reusable components for building data processing pipelines
src/pipelib.ads:--   following Domain-Driven Design principles with Ada 2022.
src/pipelib.ads:--   =============================================================================
src/pipelib/core/pipelib-core.ads:--   =============================================================================
src/pipelib/core/pipelib-core.ads:--   Pipelib.Core - Core Domain Components
src/pipelib/core/pipelib-core.ads:--   Copyright (c) 2025 A Bit of Help, Inc.
src/pipelib/core/pipelib-core.ads:--   SPDX-License-Identifier: MIT
src/pipelib/core/pipelib-core.ads:--   =============================================================================
src/pipelib/core/application/pipelib-core-application-services.ads:--   =============================================================================
src/pipelib/core/application/pipelib-core-application-services.ads:--   Pipelib.Core.Application.Services - Application Services Package
src/pipelib/core/application/pipelib-core-application-services.ads:--   Copyright (c) 2025 A Bit of Help, Inc.
src/pipelib/core/application/pipelib-core-application-services.ads:--   SPDX-License-Identifier: MIT
src/pipelib/core/application/pipelib-core-application-services.ads:--
src/pipelib/core/application/pipelib-core-application-services.ads:--   Root package for application service components
src/pipelib/core/application/pipelib-core-application-services.ads:--   =============================================================================
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  =============================================================================
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  Pipelib.Core.Application.DTOs - Application Data Transfer Objects
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  Copyright (c) 2025 A Bit of Help, Inc.
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  SPDX-License-Identifier: MIT
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  ## Application Layer Data Transfer Objects
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  This package defines Data Transfer Objects (DTOs) that serve as the
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  application layer's public interface, preventing domain objects from
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  leaking through architectural boundaries.
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  ### Clean Architecture Compliance
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  **Boundary Protection**: DTOs act as a protective layer that:
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  * Prevents direct coupling between external clients and domain objects
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  * Allows domain objects to evolve without breaking application interfaces
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  * Provides stable contracts for external system integration
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  * Enables independent evolution of domain and application concerns
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  **Dependency Direction**: DTOs depend only on standard types and avoid
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  domain object dependencies, maintaining proper architectural flow.
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  **Interface Stability**: Application services use these DTOs for all
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  external communication, providing stable APIs regardless of internal changes.
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  ### DTO Design Principles
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  **Simple Data Containers**: DTOs contain only data and basic validation:
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  * No business logic or behavior
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  * Simple field validation only
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  * Immutable once constructed where possible
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  * Clear, self-documenting field names
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  **Translation Focus**: DTOs facilitate translation between layers:
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  * External formats ↔ Application DTOs ↔ Domain Objects
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  * Network protocols ↔ Application DTOs ↔ Domain Objects
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  * Storage formats ↔ Application DTOs ↔ Domain Objects
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  **Performance Considerations**: DTOs are designed for efficiency:
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  * Minimal memory footprint
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  * Fast construction and copying
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  * No expensive operations in accessors
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  * Suitable for high-frequency operations
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  ### Usage Patterns
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  **Request DTOs**: For incoming data to application services
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  ```ada
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  -- Client sends processing request
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  Request : constant Process_Chunk_Request := (
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--     Data_Size => 1024,
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--     Position  => 4096,
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--     Priority  => Normal
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  );
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  -- Application service translates to domain objects
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  Domain_Chunk := Convert_To_Domain_Chunk(Request);
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  ```
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  **Response DTOs**: For outgoing data from application services
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  ```ada
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  -- Application service translates from domain objects
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  Response : constant Process_Chunk_Response := (
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--     Success      => Result.Is_Ok,
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--     Chunks_Processed => Statistics.Total_Processed,
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--     Error_Message    => (if Result.Is_Ok then "" else Result.Error)
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  );
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  ```
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  ### Error Handling
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  DTOs use simple, application-appropriate error handling:
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  * Basic validation for field constraints
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  * String-based error messages for client consumption
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  * No domain-specific error types exposed
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  * Clear success/failure indicators
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--
src/pipelib/core/application/dtos/pipelib-core-application-dtos.ads:--  =============================================================================
src/pipelib/core/application/pipelib-core-application.ads:--   =============================================================================
src/pipelib/core/application/pipelib-core-application.ads:--   Pipelib.Core.Application - Application Layer Package
src/pipelib/core/application/pipelib-core-application.ads:--   Copyright (c) 2025 A Bit of Help, Inc.
src/pipelib/core/application/pipelib-core-application.ads:--   SPDX-License-Identifier: MIT
src/pipelib/core/application/pipelib-core-application.ads:--
src/pipelib/core/application/pipelib-core-application.ads:--   Parent package for application layer components.
src/pipelib/core/application/pipelib-core-application.ads:--   =============================================================================
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   =============================================================================
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   Pipelib.Core.Application.Services.Parallel_Chunk_Processor
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   Copyright (c) 2025 A Bit of Help, Inc.
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   SPDX-License-Identifier: MIT
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   ## Parallel Chunk Processor - High-Performance Concurrent Processing
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   A generic application service that processes chunks in parallel using multiple
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   worker tasks. This is the core component for achieving high-throughput data
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   processing by leveraging all available CPU cores.
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   ### Architecture Overview
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   ```
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   +-----------------------------------------------------+
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   â                 Parallel Processor                     â
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   â                                                         â
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   â  Input Queue âââ                          âââ Output   â
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   â               â                          â     File    â
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   â               â¼                          â¼             â
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   |       +--------------+     +--------------+      |
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   |       +--------------+     +--------------+      |
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   |       +--------------+     +--------------+      |
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   |       +--------------+     +--------------+      |
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   |       +--------------+     +--------------+      |
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   |       +--------------+     +--------------+      |
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   |    +---+ +---+ +---+ +---+    |               |
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   |       +--------------+     +--------------+      |
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   |    +---+ +---+ +---+ +---+                    |
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   |       +--------------+     +--------------+      |
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   +-----------------------------------------------------+
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   ```
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   ### Key Features
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   * **Scalable Processing**: Support for 1-64 worker tasks
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   * **Out-of-Order Processing**: Chunks can be processed and written in any order
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   * **Generic Design**: Works with any chunk processing function
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   * **Thread-Safe Operations**: Built on Ada's protected types and rendezvous
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   * **Error Resilience**: Continues processing even if individual chunks fail
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   * **Automatic Load Balancing**: Work distributed evenly across workers
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   * **Resource Management**: Proper cleanup and lifecycle management
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   ### Generic Parameters
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   The processor is generic over two parameters:
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   * `Context_Type` - Application-specific context passed to processing function
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   * `Process_Chunk` - Function that transforms input chunks to output chunks
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   ### Performance Characteristics
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   * **Throughput**: Scales linearly with worker count up to CPU core limit
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   * **Memory Usage**: O(worker_count + queue_size) chunk buffers
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   * **Latency**: Minimal coordination overhead through lock-free queues
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   * **Scalability**: Tested with up to 64 workers on high-core systems
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   ### Thread Safety
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   All operations are thread-safe and can be called concurrently:
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   * Work queue uses Ada's synchronized containers
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   * Statistics tracking uses protected types
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   * File writing coordinated through random-access file handler
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   * Worker tasks communicate through rendezvous
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   ### Error Handling Strategy
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   * Individual chunk failures don't stop overall processing
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   * Errors are aggregated and can be queried after completion
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   * Failed chunks can be retried by resubmitting them
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   * Emergency shutdown available through `Stop` procedure
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   ### Usage Patterns
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   #### Basic Processing Pipeline
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   ```ada
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   -- Define processing function
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   function My_Transform (Chunk : File_Chunk_Type; Context : String)
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--                         return File_Chunk_Type is
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   begin
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--      -- Transform chunk data
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--      return Transformed_Chunk;
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   end My_Transform;
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   -- Instantiate processor
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   package My_Processor is new Parallel_Chunk_Processor
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--     (Context_Type => String, Process_Chunk => My_Transform);
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   -- Create and use processor
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   declare
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--      Processor : constant My_Processor.Parallel_Processor_Access :=
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--        My_Processor.Create (Worker_Count => 8,
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--                            Output_File => File,
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--                            Context => "config");
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   begin
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--      Processor.Start;
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--      for Chunk of Input_Chunks loop
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--         Processor.Submit_Chunk (Chunk);
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--      end loop;
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--      Processor.Signal_End_Of_Input;
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--      Processor.Wait_For_Completion;
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--      Put_Line ("Processed" & Processor.Chunks_Processed'Image & " chunks");
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   end;
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   ```
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   #### Error Handling
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   ```ada
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   Processor.Wait_For_Completion;
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   if Processor.Has_Error then
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--      Put_Line ("Error occurred: " & To_String (Processor.Get_Error));
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--      -- Handle error condition
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   else
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--      Put_Line ("All chunks processed successfully");
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   end if;
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   ```
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   ### Performance Tuning
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   **Worker Count Guidelines:**
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   * Start with CPU core count
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   * For I/O-bound processing: Use 2x CPU cores
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   * For CPU-bound processing: Use 1x CPU cores
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   * For mixed workloads: Benchmark to find optimal count
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   **Memory Considerations:**
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   * Each worker holds one chunk in memory
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   * Queue depth affects memory usage and latency
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   * Monitor memory usage under load
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   **Throughput Optimization:**
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   * Ensure processing function is efficient
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   * Minimize allocations in hot paths
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   * Use zero-copy operations where possible
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   * Consider chunk size vs. parallelism trade-offs
src/pipelib/core/application/services/pipelib-core-application-services-parallel_chunk_processor.ads:--   =============================================================================
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  =============================================================================
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  Pipelib.Core.Application.Services.Progress_Display - Progress Display Service
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  Copyright (c) 2025 A Bit of Help, Inc.
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  SPDX-License-Identifier: MIT
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  ## Progress Display Application Service
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  Application layer service responsible for presenting progress information
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  to users. This service takes domain progress state and formats it for
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  console display using ANSI escape codes for real-time updates.
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  ### Architecture Compliance
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  **Separation of Concerns**: This service handles presentation logic while
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  the domain Progress_Tracker focuses purely on business state tracking.
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  **Dependency Direction**: Depends only on domain layer Progress_State,
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  maintaining proper Clean Architecture boundaries.
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  **Single Responsibility**: Focused solely on progress presentation without
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  any business logic or state management concerns.
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  ### Display Features
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  **Real-Time Updates**: Uses ANSI escape codes for in-place console updates
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  * Saves/restores cursor position for non-scrolling display
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  * Clears lines to handle varying text lengths
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  * Provides smooth visual progress indication
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  **Visual Formatting**: Professional progress display with:
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  * Right-aligned numeric values for clean presentation
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  * Color-coded completion indicators using ANSI colors
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  * Consistent spacing and layout across all progress stages
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  * Hidden cursor during updates to avoid visual artifacts
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  **Stage Tracking**: Displays all three pipeline stages:
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  * Read stage with chunk count and completion status
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  * Processing stage with transformation progress
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  * Write stage with output progress and final completion
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  ### Usage Pattern
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  ```ada
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  -- Application orchestration
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  procedure Display_Pipeline_Progress(Tracker : Progress_Tracker_Access) is
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--     Display_Service : Progress_Display_Service.Progress_Display_Type;
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  begin
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--     -- Initialize display
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--     Display_Service.Initialize_Display;
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--     -- Update loop
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--     while not Tracker.Is_All_Complete loop
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--        delay 0.1;  -- Update every 100ms
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--        Display_Service.Display_Progress(Tracker.Get_Progress_State);
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--     end loop;
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--     -- Final display and cleanup
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--     Display_Service.Display_Progress(Tracker.Get_Progress_State);
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--     Display_Service.Finalize_Display;
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  end Display_Pipeline_Progress;
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  ```
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  ### Thread Safety
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  This service is designed for single-threaded access from a dedicated
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  display task. Multiple concurrent calls may result in output conflicts.
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  ### Performance Considerations
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  * Minimal overhead - only formatting and I/O operations
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  * No memory allocation during normal operation
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  * Fast ANSI escape sequence generation
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  * Buffered output for optimal terminal performance
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-progress_display.ads:--  =============================================================================
src/pipelib/core/application/services/pipelib-core-application-services-generic_pipeline_processor.ads:--   =============================================================================
src/pipelib/core/application/services/pipelib-core-application-services-generic_pipeline_processor.ads:--   Pipelib.Core.Application.Services.Generic_Pipeline_Processor - Generic Pipeline Framework
src/pipelib/core/application/services/pipelib-core-application-services-generic_pipeline_processor.ads:--   Copyright (c) 2025 A Bit of Help, Inc.
src/pipelib/core/application/services/pipelib-core-application-services-generic_pipeline_processor.ads:--   SPDX-License-Identifier: MIT
src/pipelib/core/application/services/pipelib-core-application-services-generic_pipeline_processor.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-generic_pipeline_processor.ads:--   Generic pipeline processor that can compose multiple stages with type-safe
src/pipelib/core/application/services/pipelib-core-application-services-generic_pipeline_processor.ads:--   data flow and comprehensive error handling using Ada 2022 features.
src/pipelib/core/application/services/pipelib-core-application-services-generic_pipeline_processor.ads:--   =============================================================================
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  =============================================================================
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  Pipelib.Core.Application.Services.Pipeline_Facade - Clean Application Interface
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  Copyright (c) 2025 A Bit of Help, Inc.
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  SPDX-License-Identifier: MIT
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  ## Pipeline Facade Application Service
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  This service provides a clean, DTO-based interface to the pipeline
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  processing capabilities while maintaining proper Clean Architecture
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  boundaries. It serves as an example of how application services should
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  expose domain functionality through stable, client-friendly APIs.
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  ### Architecture Compliance
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  **Clean Boundaries**: This facade demonstrates proper Clean Architecture:
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  * Uses DTOs for all external communication (no domain object leakage)
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  * Translates between application DTOs and domain objects internally
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  * Provides stable interfaces that can evolve independently of domain changes
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  * Maintains single responsibility (orchestration, not business logic)
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  **Dependency Direction**: Follows proper dependency flow:
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  * Depends on domain layer for business logic
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  * Uses domain ports for infrastructure abstraction
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  * Exposes only application-layer concerns to clients
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  * No infrastructure dependencies (follows DIP)
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  **Interface Segregation**: Provides focused, client-specific interfaces:
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  * Simple configuration API for pipeline setup
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  * Clear processing API for chunk submission
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  * Separate monitoring API for status and statistics
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  * Distinct lifecycle management operations
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  ### Use Cases Implemented
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  **Pipeline Configuration**: Set up processing pipeline with validation
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  * Worker thread configuration
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  * Output file specification
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  * Performance tuning parameters
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  * Error handling configuration
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  **Chunk Processing**: Submit data for parallel processing
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  * Asynchronous chunk submission with immediate response
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  * Priority-based processing queues
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  * Progress monitoring and completion notification
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  * Error handling and recovery options
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  **Status Monitoring**: Monitor pipeline health and performance
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  * Real-time statistics and metrics
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  * Processing status and completion tracking
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  * Error reporting and diagnostics
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  * Performance profiling data
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  ### Error Handling
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  Application-level error handling with clear client feedback:
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  * Structured error responses with human-readable messages
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  * Error categorization (configuration, processing, system)
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  * Recovery suggestions where applicable
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  * No domain exceptions exposed to clients
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  ### Usage Example
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  ```ada
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  -- Configure pipeline
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  Config : constant Pipeline_Configuration := (
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--     Worker_Count => 8,
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--     Chunk_Size_Bytes => 65536,
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--     Output_File_Path => To_Unbounded_String("/output/processed.dat"),
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--     others => <>
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  );
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  Facade : Pipeline_Facade_Type;
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  -- Initialize pipeline
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  if Facade.Configure_Pipeline(Config).Success then
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--     -- Submit chunks for processing
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--     for Chunk_Data of Input_Chunks loop
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--        Request : constant Process_Chunk_Request := Create_Process_Request(
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--           Data_Address => Chunk_Data'Address,
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--           Data_Size => Chunk_Data'Length,
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--           File_Position => Calculate_Position(Chunk_Data)
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--        );
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--        Response : constant Process_Chunk_Response := Facade.Process_Chunk(Request);
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--        if not Response.Success then
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--           Handle_Processing_Error(Response.Error_Message);
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--        end if;
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--     end loop;
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--     -- Monitor completion
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--     Status : constant Pipeline_Status := Facade.Get_Pipeline_Status;
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--     Wait_For_Completion(Status);
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  else
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--     Handle_Configuration_Error;
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  end if;
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  ```
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--
src/pipelib/core/application/services/pipelib-core-application-services-pipeline_facade.ads:--  =============================================================================
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk-vectors.ads:--  =============================================================================
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk-vectors.ads:--  Pipelib.Core.Domain.Value_Objects.File_Chunk.Vectors - File Chunk Vector
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk-vectors.ads:--  Copyright (c) 2025 A Bit of Help, Inc.
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk-vectors.ads:--  SPDX-License-Identifier: MIT
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk-vectors.ads:--
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk-vectors.ads:--  Vector container for File_Chunk objects for batch processing.
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk-vectors.ads:--  =============================================================================
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-chunk_size.ads:--  =============================================================================
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-chunk_size.ads:--  Pipelib.Core.Domain.Value_Objects.Chunk_Size - Chunk Size Value Object
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-chunk_size.ads:--  Copyright (c) 2025 A Bit of Help, Inc.
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-chunk_size.ads:--  SPDX-License-Identifier: MIT
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-chunk_size.ads:--
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-chunk_size.ads:--  Represents the size of data chunks for pipeline processing.
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-chunk_size.ads:--  Provides common chunk sizes and validation.
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-chunk_size.ads:--  =============================================================================
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-stage_order.ads:--   =============================================================================
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-stage_order.ads:--   Pipelib.Core.Domain.Value_Objects.Stage_Order - Stage Order Value Object
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-stage_order.ads:--   Copyright (c) 2025 A Bit of Help, Inc.
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-stage_order.ads:--   SPDX-License-Identifier: MIT
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-stage_order.ads:--
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-stage_order.ads:--   Type-safe stage ordering for pipeline stage sequencing and execution order
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-stage_order.ads:--   management. Ensures stages execute in the correct sequence.
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-stage_order.ads:--   =============================================================================
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-worker_count.ads:--   =============================================================================
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-worker_count.ads:--   Pipelib.Core.Domain.Value_Objects.Worker_Count - Worker Count Value Object
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-worker_count.ads:--   Copyright (c) 2025 A Bit of Help, Inc.
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-worker_count.ads:--   SPDX-License-Identifier: MIT
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-worker_count.ads:--
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-worker_count.ads:--   Value object representing the number of worker threads/tasks for
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-worker_count.ads:--   parallel pipeline processing.
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-worker_count.ads:--   =============================================================================
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   =============================================================================
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   Pipelib.Core.Domain.Value_Objects.Algorithm - Algorithm Value Object
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   Copyright (c) 2025 A Bit of Help, Inc.
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   SPDX-License-Identifier: MIT
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   ## Algorithm Value Object - Type-Safe Algorithm Specification
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   Immutable value object for specifying data processing algorithms with compile-time
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   validation and runtime safety. Provides type-safe access to compression, encryption,
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   hashing, and custom algorithm implementations.
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   ### Design Philosophy
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   This value object follows Domain-Driven Design principles:
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   * **Immutability**: Algorithm instances cannot be modified after creation
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   * **Value Semantics**: Two algorithms with the same name are equal
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   * **Validation**: All algorithm names must follow strict formatting rules
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   * **Type Safety**: Invalid algorithms cannot be constructed
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   ### Algorithm Categories
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   Algorithms are automatically categorized based on their names:
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   * **Compression**: Data reduction algorithms (brotli, gzip, zstd, lz4)
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   * **Encryption**: Data protection algorithms (aes-256-gcm, chacha20-poly1305)
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   * **Hashing**: Data integrity algorithms (sha256, sha512, blake3)
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   * **Custom**: User-defined algorithms with application-specific logic
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   ### Naming Convention
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   Algorithm names must follow strict formatting rules for consistency:
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   * Only lowercase letters (a-z)
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   * Digits (0-9)
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   * Hyphens (-) for word separation
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   * No spaces, underscores, or special characters
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   * Examples: "gzip", "aes-256-gcm", "sha512", "custom-transform"
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   ### Performance Characteristics
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   * **Zero-Copy Construction**: Algorithm names stored as Unbounded_String
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   * **Fast Equality**: String comparison for algorithm matching
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   * **Compile-Time Validation**: Invalid formats rejected at compile time
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   * **Category Lookup**: O(1) categorization through name pattern matching
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   ### Integration with Pipeline
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   Algorithm objects integrate seamlessly with the processing pipeline:
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   * Chunk processors query algorithm type to select implementation
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   * Configuration files specify algorithms by name
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   * Runtime algorithm switching through factory methods
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   * Validation ensures only supported algorithms are used
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   ### Usage Patterns
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   **Built-in Algorithms:**
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   ```ada
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   -- Use predefined compression algorithm
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   declare
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--      Compress_Algo : constant Algorithm_Type := Brotli;
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   begin
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--      Process_With_Algorithm (Data, Compress_Algo);
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   end;
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   -- Use predefined encryption algorithm
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   declare
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--      Encrypt_Algo : constant Algorithm_Type := AES_256_GCM;
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   begin
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--      Secure_Process (Sensitive_Data, Encrypt_Algo);
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   end;
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   ```
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   **Custom Algorithms:**
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   ```ada
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   -- Define custom algorithm
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   declare
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--      Custom_Algo : constant Algorithm_Type := Create ("my-custom-transform");
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   begin
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--      pragma Assert (Category (Custom_Algo) = Custom);
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--      Apply_Custom_Processing (Data, Custom_Algo);
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   end;
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   ```
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   **Configuration-Driven Processing:**
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   ```ada
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   -- Process chunks based on configuration
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   declare
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--      Config_Algorithm : constant Algorithm_Type :=
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--         Create (Get_Config_Value ("processing.algorithm"));
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   begin
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--      case Category (Config_Algorithm) is
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--         when Compression =>
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--            Apply_Compression (Chunk, Config_Algorithm);
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--         when Encryption =>
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--            Apply_Encryption (Chunk, Config_Algorithm);
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--         when Hashing =>
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--            Calculate_Hash (Chunk, Config_Algorithm);
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--         when Custom =>
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--            Apply_Custom_Logic (Chunk, Config_Algorithm);
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--      end case;
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   end;
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   ```
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   ### Memory Management
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   * Uses Ada's controlled types for automatic string memory management
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   * No manual memory allocation or deallocation required
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   * Safe to copy and assign without memory leaks
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   * Minimal memory footprint (single string storage)
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   ### Thread Safety
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   Algorithm objects are completely thread-safe:
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   * Immutable after construction - no race conditions possible
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   * Safe to share between concurrent tasks
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   * No synchronization required for read operations
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   * Factory methods are thread-safe
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-algorithm.ads:--   =============================================================================
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects.ads:--   =============================================================================
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects.ads:--   Pipelib.Core.Domain.Value_Objects - Value Objects Package
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects.ads:--   Copyright (c) 2025 A Bit of Help, Inc.
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects.ads:--   SPDX-License-Identifier: MIT
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects.ads:--   =============================================================================
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--   =============================================================================
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--   Pipelib.Core.Domain.Value_Objects.File_Chunk - File Chunk Value Object
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--   Copyright (c) 2025 A Bit of Help, Inc.
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--   SPDX-License-Identifier: MIT
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--   Immutable chunk of data for processing within a pipeline system.
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--   Follows Domain-Driven Design principles and ensures data integrity.
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--   MEMORY MANAGEMENT WITH ADA 2022 OWNERSHIP:
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--   =========================================
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--   This type uses Ada 2022 ownership features for safe memory management:
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--   1. OWNERSHIP MODEL:
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--      - Each File_Chunk_Type owns its Data (Stream_Element_Array)
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--      - Ownership is exclusive - no sharing of data between chunks
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--      - Memory is automatically freed when chunk goes out of scope
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--   2. COPY SEMANTICS:
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--      - Assignment creates a deep copy (implemented in Adjust)
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--      - Each copy owns its own data independently
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--      - No risk of double-free or use-after-free
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--   3. PERFORMANCE CONSIDERATIONS:
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--      - Chunks can be large (up to 512MB)
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--      - Deep copying is expensive for large chunks
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--      - Use 'renames' or 'access' parameters to avoid copies
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--      - Consider using 'Move' semantics when ownership transfer is intended
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--   4. BEST PRACTICES:
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--      - Prefer passing chunks as 'in' parameters (no copy)
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--      - Use 'access' parameters when mutation is needed
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--      - Avoid unnecessary assignments
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--      - Let chunks go out of scope naturally for cleanup
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--   5. TASK SAFETY:
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--      - Read operations are task-safe
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--      - Write operations require external synchronization
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--      - Each task should own its chunks independently
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--   6. USAGE EXAMPLES:
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--      -- Efficient parameter passing (no copy):
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--      procedure Process (Chunk : in File_Chunk_Type);
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--      -- When mutation is needed (still no copy):
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--      procedure Update (Chunk : access File_Chunk_Type);
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--      -- Efficient ownership transfer:
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--      declare
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--         Source : File_Chunk_Type := Create (...);
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--         Target : File_Chunk_Type;
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--      begin
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--         Move (Target, Source);  -- Source now has null data
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--      end;
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--      -- Avoid expensive copies:
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--      Chunk_Ref : File_Chunk_Type renames Some_Chunk;  -- No copy
src/pipelib/core/domain/value_objects/pipelib-core-domain-value_objects-file_chunk.ads:--   =============================================================================
src/pipelib/core/domain/pipelib-core-domain.ads:--   =============================================================================
src/pipelib/core/domain/pipelib-core-domain.ads:--   Pipelib.Core.Domain - Domain Layer Components
src/pipelib/core/domain/pipelib-core-domain.ads:--   Copyright (c) 2025 A Bit of Help, Inc.
src/pipelib/core/domain/pipelib-core-domain.ads:--   SPDX-License-Identifier: MIT
src/pipelib/core/domain/pipelib-core-domain.ads:--   =============================================================================
src/pipelib/core/domain/ports/pipelib-core-domain-ports.ads:--  =============================================================================
src/pipelib/core/domain/ports/pipelib-core-domain-ports.ads:--  Pipelib.Core.Domain.Ports - Domain Port Interfaces
src/pipelib/core/domain/ports/pipelib-core-domain-ports.ads:--  Copyright (c) 2025 A Bit of Help, Inc.
src/pipelib/core/domain/ports/pipelib-core-domain-ports.ads:--  SPDX-License-Identifier: MIT
src/pipelib/core/domain/ports/pipelib-core-domain-ports.ads:--
src/pipelib/core/domain/ports/pipelib-core-domain-ports.ads:--  Parent package for all domain port interfaces following hexagonal architecture.
src/pipelib/core/domain/ports/pipelib-core-domain-ports.ads:--  =============================================================================
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   =============================================================================
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   Pipelib.Core.Domain.Ports.File_Writer_Interface - File Writing Port
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   Copyright (c) 2025 A Bit of Help, Inc.
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   SPDX-License-Identifier: MIT
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   ## File Writer Domain Port Interface
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   This port defines the abstraction for file writing operations required by
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   the domain layer. It follows the hexagonal architecture pattern where the
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   domain defines the interface and infrastructure provides implementations.
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   ### Purpose
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   **Dependency Inversion**: Allows application services to depend on abstractions
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   rather than concrete infrastructure implementations, enabling:
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   * Easy testing with mock implementations
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   * Pluggable infrastructure implementations
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   * Clean architectural boundaries
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   * Separation of business logic from technical concerns
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   **Domain-Driven Design**: Represents the domain's need for persistent file
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   output without exposing technical implementation details like:
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   * File system APIs
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   * Memory mapping strategies
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   * Concurrency mechanisms
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   * Platform-specific optimizations
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   ### Core Operations
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   **Chunk Writing**: Write processed data chunks to output files
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   * Position-based writing for parallel processing
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   * Automatic position calculation from chunk sequence
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   * Type-safe chunk data handling
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   **Transaction Management**: Ensure data integrity during write operations
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   * Atomic commit/rollback semantics
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   * Temporary file safety for reliable updates
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   * Resource cleanup and error recovery
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   **Resource Lifecycle**: Manage file resources throughout processing
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   * Open/close file handles
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   * Status checking for operational safety
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   * Proper resource cleanup on completion
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   ### Usage Pattern
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   ```ada
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   -- Application service depends on abstraction
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   procedure Process_Chunks(Writer : in out File_Writer_Interface'Class) is
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   begin
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--      for Chunk of Processed_Chunks loop
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--         Writer.Write_Chunk(Chunk);
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--      end loop;
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--      Writer.Commit;
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   end Process_Chunks;
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   -- Infrastructure provides concrete implementation
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   type Random_Write_File is new File_Writer_Interface with ...;
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   ```
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   ### Error Handling
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   All operations return Result types following domain error handling patterns:
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   * Success/failure indication without exceptions
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   * Detailed error context for debugging
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   * Structured error types for programmatic handling
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   * No technical error details exposed to domain
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   ### Contracts
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   Ada 2022 contracts ensure interface integrity:
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   * Preconditions validate call prerequisites
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   * Postconditions guarantee operation results
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   * Type invariants maintain interface consistency
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   * Abstract operations enforce implementation requirements
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--
src/pipelib/core/domain/ports/pipelib-core-domain-ports-file_writer_interface.ads:--   =============================================================================
src/pipelib/core/domain/ports/pipelib-core-domain-ports-memory_mapped_file_interface.ads:--  =============================================================================
src/pipelib/core/domain/ports/pipelib-core-domain-ports-memory_mapped_file_interface.ads:--  Pipelib.Core.Domain.Ports.Memory_Mapped_File_Interface - Domain Interface
src/pipelib/core/domain/ports/pipelib-core-domain-ports-memory_mapped_file_interface.ads:--  Copyright (c) 2025 A Bit of Help, Inc.
src/pipelib/core/domain/ports/pipelib-core-domain-ports-memory_mapped_file_interface.ads:--  SPDX-License-Identifier: MIT
src/pipelib/core/domain/ports/pipelib-core-domain-ports-memory_mapped_file_interface.ads:--
src/pipelib/core/domain/ports/pipelib-core-domain-ports-memory_mapped_file_interface.ads:--  Domain interface for memory-mapped file operations, enabling zero-copy
src/pipelib/core/domain/ports/pipelib-core-domain-ports-memory_mapped_file_interface.ads:--  access to large files while maintaining architectural boundaries.
src/pipelib/core/domain/ports/pipelib-core-domain-ports-memory_mapped_file_interface.ads:--  =============================================================================
src/pipelib/core/domain/services/stages/pipelib-core-domain-services-stages.ads:--   =============================================================================
src/pipelib/core/domain/services/stages/pipelib-core-domain-services-stages.ads:--   Pipelib.Core.Domain.Services.Stages - Pipeline Stages Package
src/pipelib/core/domain/services/stages/pipelib-core-domain-services-stages.ads:--   Copyright (c) 2025 A Bit of Help, Inc.
src/pipelib/core/domain/services/stages/pipelib-core-domain-services-stages.ads:--   SPDX-License-Identifier: MIT
src/pipelib/core/domain/services/stages/pipelib-core-domain-services-stages.ads:--   =============================================================================
src/pipelib/core/domain/services/stages/pipelib-core-domain-services-stages-stage_interface.ads:--   =============================================================================
src/pipelib/core/domain/services/stages/pipelib-core-domain-services-stages-stage_interface.ads:--   Pipelib.Core.Domain.Services.Stages.Stage_Interface - Pipeline Stage Interface
src/pipelib/core/domain/services/stages/pipelib-core-domain-services-stages-stage_interface.ads:--   Copyright (c) 2025 A Bit of Help, Inc.
src/pipelib/core/domain/services/stages/pipelib-core-domain-services-stages-stage_interface.ads:--   SPDX-License-Identifier: MIT
src/pipelib/core/domain/services/stages/pipelib-core-domain-services-stages-stage_interface.ads:--
src/pipelib/core/domain/services/stages/pipelib-core-domain-services-stages-stage_interface.ads:--   Common interface for all pipeline stages, defining the contract that
src/pipelib/core/domain/services/stages/pipelib-core-domain-services-stages-stage_interface.ads:--   all stages must implement for consistent pipeline processing.
src/pipelib/core/domain/services/stages/pipelib-core-domain-services-stages-stage_interface.ads:--   =============================================================================
src/pipelib/core/domain/services/stages/pipelib-core-domain-services-stages-generic_hasher_stage.ads:--   =============================================================================
src/pipelib/core/domain/services/stages/pipelib-core-domain-services-stages-generic_hasher_stage.ads:--   Pipelib.Core.Domain.Services.Stages.Generic_Hasher_Stage - Generic Pipeline Hasher Stage
src/pipelib/core/domain/services/stages/pipelib-core-domain-services-stages-generic_hasher_stage.ads:--   Copyright (c) 2025 A Bit of Help, Inc.
src/pipelib/core/domain/services/stages/pipelib-core-domain-services-stages-generic_hasher_stage.ads:--   SPDX-License-Identifier: MIT
src/pipelib/core/domain/services/stages/pipelib-core-domain-services-stages-generic_hasher_stage.ads:--
src/pipelib/core/domain/services/stages/pipelib-core-domain-services-stages-generic_hasher_stage.ads:--   Generic hasher stage for pipeline processing that maintains a running SHA256
src/pipelib/core/domain/services/stages/pipelib-core-domain-services-stages-generic_hasher_stage.ads:--   hash of data chunks passing through. Can be instantiated for various purposes
src/pipelib/core/domain/services/stages/pipelib-core-domain-services-stages-generic_hasher_stage.ads:--   within different pipeline implementations.
src/pipelib/core/domain/services/stages/pipelib-core-domain-services-stages-generic_hasher_stage.ads:--   =============================================================================
src/pipelib/core/domain/services/stages/pipelib-core-domain-services-stages-generic_pipeline_stage.ads:--   =============================================================================
src/pipelib/core/domain/services/stages/pipelib-core-domain-services-stages-generic_pipeline_stage.ads:--   Pipelib.Core.Domain.Services.Stages.Generic_Pipeline_Stage - Generic Pipeline Stage Framework
src/pipelib/core/domain/services/stages/pipelib-core-domain-services-stages-generic_pipeline_stage.ads:--   Copyright (c) 2025 A Bit of Help, Inc.
src/pipelib/core/domain/services/stages/pipelib-core-domain-services-stages-generic_pipeline_stage.ads:--   SPDX-License-Identifier: MIT
src/pipelib/core/domain/services/stages/pipelib-core-domain-services-stages-generic_pipeline_stage.ads:--
src/pipelib/core/domain/services/stages/pipelib-core-domain-services-stages-generic_pipeline_stage.ads:--   Generic framework for creating type-safe pipeline stages with comprehensive
src/pipelib/core/domain/services/stages/pipelib-core-domain-services-stages-generic_pipeline_stage.ads:--   contracts and Ada 2022 features.
src/pipelib/core/domain/services/stages/pipelib-core-domain-services-stages-generic_pipeline_stage.ads:--   =============================================================================
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  =============================================================================
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  Core.Domain.Services.Progress_Tracker - Simple Progress Tracking
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  Copyright (c) 2025 A Bit of Help, Inc.
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  SPDX-License-Identifier: MIT
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  ## Progress Tracker - Thread-Safe Pipeline Progress Monitoring
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  Domain service that provides real-time progress tracking for multi-stage
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  data processing pipelines. Enables monitoring of read, processing, and
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  write operations across concurrent workers with thread-safe access.
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  ### Key Features
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  **Thread-Safe Monitoring:**
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  * Protected type ensures safe access from multiple concurrent tasks
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  * Atomic updates prevent race conditions and inconsistent state
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  * Multiple readers can query progress simultaneously
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  * Write operations are automatically serialized
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  **Multi-Stage Tracking:**
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  * **Read Stage**: Track chunks being read from input sources
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  * **Processing Stage**: Monitor transformation/computation progress
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  * **Write Stage**: Track chunks being written to output destinations
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  * **Completion Tracking**: Detect when each stage finishes
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  **Real-Time Display:**
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  * In-place progress updates (carriage return) for console applications
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  * Configurable display format for different UI requirements
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  * Non-blocking updates that don't impact processing performance
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  * Clear indication of completion status for each stage
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  ### Progress Monitoring Philosophy
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  The tracker follows a "push" model where processing components actively
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  report their progress rather than being polled. This provides:
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  * **Low Overhead**: No polling loops consuming CPU cycles
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  * **Real-Time Updates**: Progress updates as work completes
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  * **Accurate Reporting**: Components know exactly what they've accomplished
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  * **Scalability**: Works efficiently with any number of concurrent workers
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  ### Pipeline Integration
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  This service integrates with the pipeline architecture to provide
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  comprehensive progress visibility:
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  ```
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  Input Source âââº Read Stage âââº Processing Stage âââº Write Stage âââº Output
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--        â              â                â                 â
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--        â              â¼                â¼                 â¼
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--        +--------------> Progress_Tracker <----------------+
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--                     (Thread-Safe)
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  ```
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  ### Use Cases
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  **Long-Running Operations:**
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  * Large file processing (>1GB) with user progress feedback
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  * Batch processing jobs that may run for hours
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  * Data migration operations with thousands of records
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  * Scientific computations with iterative processing
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  **User Interface Integration:**
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  * Console applications with text-based progress bars
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  * GUI applications with graphical progress indicators
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  * Web applications with AJAX progress updates
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  * Monitoring dashboards for batch processing systems
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  **Performance Analysis:**
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  * Identifying bottlenecks in multi-stage pipelines
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  * Monitoring worker utilization and load balancing
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  * Tracking throughput rates for performance tuning
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  * Detecting stalled or failed processing stages
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  ### Thread Safety Guarantees
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  * **Update Atomicity**: Each counter update is atomic
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  * **Consistency**: All progress queries return consistent snapshots
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  * **Completion Logic**: Stage completion flags are properly synchronized
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  * **Display Safety**: Progress display operations are thread-safe
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  ### Performance Impact
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  * **Minimal Overhead**: Protected type operations are very fast (microseconds)
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  * **No Blocking**: Update operations don't block processing threads
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  * **Efficient Queries**: Read operations can proceed concurrently
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  * **Scalable**: Performance doesn't degrade with more workers
src/pipelib/core/domain/services/pipelib-core-domain-services-progress_tracker.ads:--  =============================================================================
src/pipelib/core/domain/services/pipelib-core-domain-services.ads:--   =============================================================================
src/pipelib/core/domain/services/pipelib-core-domain-services.ads:--   Pipelib.Core.Domain.Services - Domain Services Package
src/pipelib/core/domain/services/pipelib-core-domain-services.ads:--   Copyright (c) 2025 A Bit of Help, Inc.
src/pipelib/core/domain/services/pipelib-core-domain-services.ads:--   SPDX-License-Identifier: MIT
src/pipelib/core/domain/services/pipelib-core-domain-services.ads:--   =============================================================================
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--  =============================================================================
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--  Pipelib.Core.Domain.Entities.Chunk - Chunk Entity
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--  Copyright (c) 2025 A Bit of Help, Inc.
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--  SPDX-License-Identifier: MIT
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--  ## Chunk Entity - Stateful Data Processing Unit
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--  Represents a chunk of data being processed through the pipeline.
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--  This is a Domain-Driven Design (DDD) entity with identity (chunk number)
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--  and mutable state that tracks the chunk's progress through various
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--  processing stages.
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--  ### Entity vs Value Object
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--  Unlike File_Chunk_Type (value object), Chunk_Type is an entity:
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--  * **Identity**: Each chunk has a unique number that defines its identity
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--  * **Mutable State**: Chunks transition through processing states
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--  * **Lifecycle**: Chunks are created, processed, and can be reused
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--  * **Reference Equality**: Two chunks are equal if they have the same number
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--  ### State Machine
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--  Chunks follow a well-defined state machine with retry capabilities:
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--  ```
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--  Created â Reading â Read â Processing â Processed â Writing â Written
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--     â         â        â        â           â          â
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--     +----------+---------+---------+------------+-----------+
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--           (Retry paths for error recovery)
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--  ```
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--  ### Thread Safety
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--  Chunk entities are NOT thread-safe. Each chunk should be owned by a
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--  single task at a time. Use message passing or protected types to
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--  coordinate chunk access between tasks.
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--  ### Memory Management
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--  Chunks use zero-copy operations through ownership transfer:
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--  * Set_Data transfers ownership of memory to the chunk
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--  * The chunk is responsible for deallocating memory when reset/destroyed
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--  * Data pointers become null after ownership transfer
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--  ### Performance Considerations
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--  * State transitions are O(1) operations
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--  * Data operations transfer ownership, avoiding copies
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--  * Chunks can be pooled and reused to reduce allocation overhead
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--  * Inline functions provide efficient access to properties
src/pipelib/core/domain/entities/pipelib-core-domain-entities-chunk.ads:--  =============================================================================
src/pipelib/core/domain/entities/pipelib-core-domain-entities.ads:--  =============================================================================
src/pipelib/core/domain/entities/pipelib-core-domain-entities.ads:--  Pipelib.Core.Domain.Entities - Domain Entities Package
src/pipelib/core/domain/entities/pipelib-core-domain-entities.ads:--  Copyright (c) 2025 A Bit of Help, Inc.
src/pipelib/core/domain/entities/pipelib-core-domain-entities.ads:--  SPDX-License-Identifier: MIT
src/pipelib/core/domain/entities/pipelib-core-domain-entities.ads:--
src/pipelib/core/domain/entities/pipelib-core-domain-entities.ads:--  Root package for pipelib domain entities. Entities are domain objects with
src/pipelib/core/domain/entities/pipelib-core-domain-entities.ads:--  identity and lifecycle that can change over time.
src/pipelib/core/domain/entities/pipelib-core-domain-entities.ads:--  =============================================================================
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_file.ads:--  =============================================================================
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_file.ads:--  Pipelib.Infrastructure.IO.Memory_Mapped_File - Memory-Mapped File Support
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_file.ads:--  Copyright (c) 2025 A Bit of Help, Inc.
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_file.ads:--  SPDX-License-Identifier: MIT
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_file.ads:--
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_file.ads:--  Provides zero-copy access to files through memory mapping for optimal
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_file.ads:--  performance with large files.
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_file.ads:--  =============================================================================
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   =============================================================================
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   Pipelib.Infrastructure.IO.Random_Write_File - Random Access File Writer
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   Copyright (c) 2025 A Bit of Help, Inc.
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   SPDX-License-Identifier: MIT
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   ## Random Access File Writer - Concurrent Out-of-Order Writing
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   High-performance file writer that enables parallel chunk processing by supporting
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   random-access writes to specific file positions. This is essential for parallel
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   pipelines where chunks may complete processing in any order.
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   ### Key Capabilities
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   **Out-of-Order Writing:**
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   * Write chunks to any position in the file without sequential constraints
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   * Support for parallel workers writing different file regions simultaneously
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   * Automatic position calculation based on chunk sequence numbers
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   * Direct position specification for maximum flexibility
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   **Thread Safety Options:**
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   * **Regular Type**: Single-threaded access with maximum performance
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   * **Protected Type**: Thread-safe wrapper for concurrent access from multiple tasks
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   * Choice based on architecture needs and performance requirements
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   **Transactional Safety:**
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   * Optional temporary file usage for atomic operations
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   * Commit/rollback semantics for reliable file updates
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   * Automatic cleanup on failure or cancellation
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   * Protection against partial writes corrupting existing files
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   ### Performance Characteristics
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   **Write Performance:**
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   * Random access: 100-500 MB/s (depends on storage type and access patterns)
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   * Sequential writes: Near-maximum storage bandwidth
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   * Memory mapping: Leverages OS virtual memory for optimal performance
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   * Pre-allocation: Reduces fragmentation and improves write speeds
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   **Concurrency Model:**
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   * Multiple threads can write to different file positions simultaneously
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   * Protected type provides automatic synchronization
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   * Lock-free algorithms where possible for maximum throughput
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   * Minimal contention through position-based access patterns
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   ### Use Cases
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   **Parallel Processing Pipelines:**
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   * Image/video processing where tiles can be processed independently
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   * Data transformation where chunks can be computed out-of-order
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   * Compression/decompression with parallel block processing
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   * Scientific computing with independent data segments
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   **High-Throughput Data Assembly:**
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   * Network file transfers with out-of-order packet arrival
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   * Database dump restoration with parallel table processing
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   * Log file merging from multiple sources
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   * Backup/restore operations with concurrent streams
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   ### Error Resilience
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   **Failure Recovery:**
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   * Automatic rollback on write failures
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   * Temporary file isolation prevents corruption of existing files
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   * Detailed error reporting with file system error codes
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   * Graceful handling of disk full, permissions, and I/O errors
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   **Data Integrity:**
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   * Atomic commit operations for file replacement
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   * Pre-allocation reduces risk of partial writes due to space exhaustion
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   * Flush operations ensure data reaches persistent storage
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   * File handle lifecycle management prevents resource leaks
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   ### Architecture Integration
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   This component implements the Infrastructure layer of the hexagonal architecture,
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   providing the concrete implementation for file writing operations needed by
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   the parallel processing application services.
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   ```
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   Application Layer:     Parallel_Chunk_Processor
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--                                   â
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--                                   â¼
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   Infrastructure Layer:   Random_Write_File ââââ This Component
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--                                   â
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--                                   â¼
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   External Systems:        File System I/O
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   ```
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   ### Memory Management
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   * Uses Ada's controlled types for automatic resource cleanup (RAII)
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   * Minimal memory footprint - no large internal buffers
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   * Leverages OS file system caching for optimal memory usage
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   * Automatic file handle management prevents resource leaks
src/pipelib/infrastructure/io/pipelib-infrastructure-io-random_write_file.ads:--   =============================================================================
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  =============================================================================
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  Pipelib.Infrastructure.IO.Memory_Mapped_Chunk_Adapter - Memory-Mapped File Chunk Adapter
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  Copyright (c) 2025 A Bit of Help, Inc.
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  SPDX-License-Identifier: MIT
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  ## Memory-Mapped File Chunk Adapter - Zero-Copy File Processing
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  High-performance adapter for creating File_Chunk objects from memory-mapped
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  files with zero-copy access. This is the most efficient way to process
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  large files (100MB - 1GB) by mapping them directly into virtual memory.
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  ### Performance Benefits
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  **Zero-Copy Access:**
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  * No memory allocation for file data - uses virtual memory mapping
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  * No copying of file contents - direct access to mapped memory
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  * Minimal memory footprint - OS manages memory pages on demand
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  * Automatic prefetching - OS optimizes memory access patterns
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  **Throughput Characteristics:**
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  * Sequential reads: 1-3 GB/s (depends on storage and memory bandwidth)
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  * Random access: Significantly faster than traditional file I/O
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  * Memory pressure: Automatically managed by OS virtual memory system
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  * Cache efficiency: Leverages OS page cache without duplication
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  ### When to Use Memory Mapping
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  **Optimal Use Cases:**
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  * Large files (100MB - 1GB) that benefit from virtual memory management
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  * Sequential or predictable access patterns
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  * Multiple passes over the same data
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  * Systems with sufficient virtual address space
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  **Avoid Memory Mapping For:**
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  * Small files (<100MB) - overhead exceeds benefits
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  * Very large files (>1GB) - may exhaust virtual address space
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  * Highly random access patterns on spinning disk storage
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  * Memory-constrained systems
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  ### Architecture Integration
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  This adapter sits in the Infrastructure layer and implements the Hexagonal
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  Architecture pattern by adapting the memory-mapped file port interface
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  to create domain value objects (File_Chunk).
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  ```
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  Domain Layer:          File_Chunk (Value Object)
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--                              â²
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  Application Layer:           â
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--                              â
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  Infrastructure Layer:  Memory_Mapped_Chunk_Adapter ââââ This Component
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--                              â
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  External Systems:      Memory_Mapped_File_Interface ââââ OS Virtual Memory
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  ```
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  ### Memory Safety Guarantees
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  * All memory access bounds are validated through Ada 2022 contracts
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  * Stream_Element_Array_Access provides type-safe access to mapped memory
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  * Automatic cleanup when File_Chunk objects are finalized
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  * Protection against buffer overruns through contract preconditions
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  ### Configuration Options
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  The adapter provides configurable options for different use cases:
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  * **Chunk Size**: Adaptive sizing based on file characteristics
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  * **Checksum Calculation**: Optional SHA-256 for data integrity
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  * **Access Patterns**: Hints to OS for sequential vs. random access optimization
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  ### Error Handling
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  All operations use the Result pattern for comprehensive error handling:
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  * Memory mapping failures (insufficient address space, permissions)
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  * File access errors (file not found, permissions, corruption)
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  * Configuration validation errors (invalid parameters)
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  * Resource exhaustion (memory, file handles)
src/pipelib/infrastructure/io/pipelib-infrastructure-io-memory_mapped_chunk_adapter.ads:--  =============================================================================
src/pipelib/infrastructure/io/pipelib-infrastructure-io.ads:--   =============================================================================
src/pipelib/infrastructure/io/pipelib-infrastructure-io.ads:--   Pipelib.Infrastructure.IO - Infrastructure I/O Package
src/pipelib/infrastructure/io/pipelib-infrastructure-io.ads:--   Copyright (c) 2025 A Bit of Help, Inc.
src/pipelib/infrastructure/io/pipelib-infrastructure-io.ads:--   SPDX-License-Identifier: MIT
src/pipelib/infrastructure/io/pipelib-infrastructure-io.ads:--
src/pipelib/infrastructure/io/pipelib-infrastructure-io.ads:--   Parent package for infrastructure-level I/O operations.
src/pipelib/infrastructure/io/pipelib-infrastructure-io.ads:--   =============================================================================
src/pipelib/infrastructure/adapters/IO/pipelib-infrastructure-adapters-io.ads:--  =============================================================================
src/pipelib/infrastructure/adapters/IO/pipelib-infrastructure-adapters-io.ads:--  Pipelib.Infrastructure.Adapters.IO - I/O Adapters
src/pipelib/infrastructure/adapters/IO/pipelib-infrastructure-adapters-io.ads:--  Copyright (c) 2025 A Bit of Help, Inc.
src/pipelib/infrastructure/adapters/IO/pipelib-infrastructure-adapters-io.ads:--  SPDX-License-Identifier: MIT
src/pipelib/infrastructure/adapters/IO/pipelib-infrastructure-adapters-io.ads:--
src/pipelib/infrastructure/adapters/IO/pipelib-infrastructure-adapters-io.ads:--  Parent package for all I/O adapters.
src/pipelib/infrastructure/adapters/IO/pipelib-infrastructure-adapters-io.ads:--  =============================================================================
src/pipelib/infrastructure/adapters/IO/pipelib-infrastructure-adapters-io-unix_memory_map.ads:--  =============================================================================
src/pipelib/infrastructure/adapters/IO/pipelib-infrastructure-adapters-io-unix_memory_map.ads:--  Pipelib.Infrastructure.Adapters.IO.Unix_Memory_Map - Unix Memory Mapping
src/pipelib/infrastructure/adapters/IO/pipelib-infrastructure-adapters-io-unix_memory_map.ads:--  Copyright (c) 2025 A Bit of Help, Inc.
src/pipelib/infrastructure/adapters/IO/pipelib-infrastructure-adapters-io-unix_memory_map.ads:--  SPDX-License-Identifier: MIT
src/pipelib/infrastructure/adapters/IO/pipelib-infrastructure-adapters-io-unix_memory_map.ads:--
src/pipelib/infrastructure/adapters/IO/pipelib-infrastructure-adapters-io-unix_memory_map.ads:--  Unix-specific implementation of memory-mapped file operations using
src/pipelib/infrastructure/adapters/IO/pipelib-infrastructure-adapters-io-unix_memory_map.ads:--  mmap system calls. Implements the domain interface for memory mapping.
src/pipelib/infrastructure/adapters/IO/pipelib-infrastructure-adapters-io-unix_memory_map.ads:--  =============================================================================
src/pipelib/infrastructure/adapters/pipelib-infrastructure-adapters.ads:--  =============================================================================
src/pipelib/infrastructure/adapters/pipelib-infrastructure-adapters.ads:--  Pipelib.Infrastructure.Adapters - Infrastructure Adapters
src/pipelib/infrastructure/adapters/pipelib-infrastructure-adapters.ads:--  Copyright (c) 2025 A Bit of Help, Inc.
src/pipelib/infrastructure/adapters/pipelib-infrastructure-adapters.ads:--  SPDX-License-Identifier: MIT
src/pipelib/infrastructure/adapters/pipelib-infrastructure-adapters.ads:--
src/pipelib/infrastructure/adapters/pipelib-infrastructure-adapters.ads:--  Parent package for all infrastructure adapters.
src/pipelib/infrastructure/adapters/pipelib-infrastructure-adapters.ads:--  =============================================================================
src/pipelib/infrastructure/pipelib-infrastructure.ads:--   =============================================================================
src/pipelib/infrastructure/pipelib-infrastructure.ads:--   Pipelib.Infrastructure - Infrastructure Layer Components
src/pipelib/infrastructure/pipelib-infrastructure.ads:--   Copyright (c) 2025 A Bit of Help, Inc.
src/pipelib/infrastructure/pipelib-infrastructure.ads:--   SPDX-License-Identifier: MIT
src/pipelib/infrastructure/pipelib-infrastructure.ads:--   =============================================================================
